// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CardContainer should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardContainer
    addBookList={[MockFunction]}
    addMessage={[MockFunction]}
    bookList={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    getBookList={[MockFunction]}
    info={
      Object {
        "Name": "Looking for Alaska",
        "wTeaser": "teaser",
      }
    }
    isLoading={false}
    location={
      Object {
        "pathname": "/SearchResults",
      }
    }
    message="message"
    removeBookList={[MockFunction]}
    results={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    sendSearch={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(Message) />,
        <div
          className="top-card-container"
        >
          <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />
        </div>,
        <h2>
          Recommendations
        </h2>,
        <div
          className="card-container"
        >
          <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Into the Wild",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />
          <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />,
          "className": "top-card-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "addBookList": [MockFunction],
            "addMessage": [MockFunction],
            "getBookList": [MockFunction],
            "isFavorite": true,
            "removeBookList": [MockFunction],
            "result": Object {
              "Name": "Looking for Alaska",
              "wTeaser": "teaser",
            },
            "sendSearch": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Recommendations",
        },
        "ref": null,
        "rendered": "Recommendations",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />,
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />,
          ],
          "className": "card-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addBookList": [MockFunction],
              "addMessage": [MockFunction],
              "getBookList": [MockFunction],
              "isFavorite": true,
              "removeBookList": [MockFunction],
              "result": Object {
                "Name": "Into the Wild",
                "wTeaser": "teaser",
              },
              "sendSearch": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addBookList": [MockFunction],
              "addMessage": [MockFunction],
              "getBookList": [MockFunction],
              "isFavorite": true,
              "removeBookList": [MockFunction],
              "result": Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              },
              "sendSearch": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Message) />,
          <div
            className="top-card-container"
          >
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />
          </div>,
          <h2>
            Recommendations
          </h2>,
          <div
            className="card-container"
          >
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />,
            "className": "top-card-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addBookList": [MockFunction],
              "addMessage": [MockFunction],
              "getBookList": [MockFunction],
              "isFavorite": true,
              "removeBookList": [MockFunction],
              "result": Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              },
              "sendSearch": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Recommendations",
          },
          "ref": null,
          "rendered": "Recommendations",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Card
                addBookList={[MockFunction]}
                addMessage={[MockFunction]}
                getBookList={[MockFunction]}
                isFavorite={true}
                removeBookList={[MockFunction]}
                result={
                  Object {
                    "Name": "Into the Wild",
                    "wTeaser": "teaser",
                  }
                }
                sendSearch={[MockFunction]}
              />,
              <Card
                addBookList={[MockFunction]}
                addMessage={[MockFunction]}
                getBookList={[MockFunction]}
                isFavorite={true}
                removeBookList={[MockFunction]}
                result={
                  Object {
                    "Name": "Looking for Alaska",
                    "wTeaser": "teaser",
                  }
                }
                sendSearch={[MockFunction]}
              />,
            ],
            "className": "card-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addBookList": [MockFunction],
                "addMessage": [MockFunction],
                "getBookList": [MockFunction],
                "isFavorite": true,
                "removeBookList": [MockFunction],
                "result": Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                },
                "sendSearch": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addBookList": [MockFunction],
                "addMessage": [MockFunction],
                "getBookList": [MockFunction],
                "isFavorite": true,
                "removeBookList": [MockFunction],
                "result": Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                },
                "sendSearch": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CardContainer should match the snapshot if location = /MustReadList 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardContainer
    addBookList={[MockFunction]}
    addMessage={[MockFunction]}
    bookList={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    getBookList={[MockFunction]}
    info={
      Object {
        "Name": "Looking for Alaska",
        "wTeaser": "teaser",
      }
    }
    isLoading={false}
    location={
      Object {
        "pathname": "/MustReadList",
      }
    }
    message="message"
    removeBookList={[MockFunction]}
    results={Array []}
    sendSearch={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(Message) />,
        <h2>
          Must Read List
        </h2>,
        <div
          className="card-container"
        >
          <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            loc="/MustReadList"
            message="message"
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Into the Wild",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />
          <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            loc="/MustReadList"
            message="message"
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Must Read List",
        },
        "ref": null,
        "rendered": "Must Read List",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />,
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />,
          ],
          "className": "card-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addBookList": [MockFunction],
              "addMessage": [MockFunction],
              "getBookList": [MockFunction],
              "isFavorite": true,
              "loc": "/MustReadList",
              "message": "message",
              "removeBookList": [MockFunction],
              "result": Object {
                "Name": "Into the Wild",
                "wTeaser": "teaser",
              },
              "sendSearch": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addBookList": [MockFunction],
              "addMessage": [MockFunction],
              "getBookList": [MockFunction],
              "isFavorite": true,
              "loc": "/MustReadList",
              "message": "message",
              "removeBookList": [MockFunction],
              "result": Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              },
              "sendSearch": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Message) />,
          <h2>
            Must Read List
          </h2>,
          <div
            className="card-container"
          >
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Must Read List",
          },
          "ref": null,
          "rendered": "Must Read List",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Card
                addBookList={[MockFunction]}
                addMessage={[MockFunction]}
                getBookList={[MockFunction]}
                isFavorite={true}
                loc="/MustReadList"
                message="message"
                removeBookList={[MockFunction]}
                result={
                  Object {
                    "Name": "Into the Wild",
                    "wTeaser": "teaser",
                  }
                }
                sendSearch={[MockFunction]}
              />,
              <Card
                addBookList={[MockFunction]}
                addMessage={[MockFunction]}
                getBookList={[MockFunction]}
                isFavorite={true}
                loc="/MustReadList"
                message="message"
                removeBookList={[MockFunction]}
                result={
                  Object {
                    "Name": "Looking for Alaska",
                    "wTeaser": "teaser",
                  }
                }
                sendSearch={[MockFunction]}
              />,
            ],
            "className": "card-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addBookList": [MockFunction],
                "addMessage": [MockFunction],
                "getBookList": [MockFunction],
                "isFavorite": true,
                "loc": "/MustReadList",
                "message": "message",
                "removeBookList": [MockFunction],
                "result": Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                },
                "sendSearch": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addBookList": [MockFunction],
                "addMessage": [MockFunction],
                "getBookList": [MockFunction],
                "isFavorite": true,
                "loc": "/MustReadList",
                "message": "message",
                "removeBookList": [MockFunction],
                "result": Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                },
                "sendSearch": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CardContainer should match the snapshot if location = /MustReadList, a bookList.length = 0 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardContainer
    addBookList={[MockFunction]}
    addMessage={[MockFunction]}
    bookList={Array []}
    getBookList={[MockFunction]}
    info={
      Object {
        "Name": "Looking for Alaska",
        "wTeaser": "teaser",
      }
    }
    isLoading={false}
    location={
      Object {
        "pathname": "/MustReadList",
      }
    }
    message="message"
    removeBookList={[MockFunction]}
    results={Array []}
    sendSearch={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(Message) />,
        <h2>
          Must Read List
        </h2>,
        <div
          className="card-container"
        >
          <h3>
            There are no Books on Your Reading List
          </h3>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Must Read List",
        },
        "ref": null,
        "rendered": "Must Read List",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <h3>
            There are no Books on Your Reading List
          </h3>,
          "className": "card-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "There are no Books on Your Reading List",
          },
          "ref": null,
          "rendered": "There are no Books on Your Reading List",
          "type": "h3",
        },
        "type": "div",
      },
    ],
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Message) />,
          <h2>
            Must Read List
          </h2>,
          <div
            className="card-container"
          >
            <h3>
              There are no Books on Your Reading List
            </h3>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Must Read List",
          },
          "ref": null,
          "rendered": "Must Read List",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              There are no Books on Your Reading List
            </h3>,
            "className": "card-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "There are no Books on Your Reading List",
            },
            "ref": null,
            "rendered": "There are no Books on Your Reading List",
            "type": "h3",
          },
          "type": "div",
        },
      ],
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CardContainer should match the snapshot if location = /SearchResults, and isLoading is false, a result.length = 0 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardContainer
    addBookList={[MockFunction]}
    addMessage={[MockFunction]}
    bookList={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    getBookList={[MockFunction]}
    info={
      Object {
        "Name": "Looking for Alaska",
        "wTeaser": "teaser",
      }
    }
    isLoading={false}
    location={
      Object {
        "pathname": "/SearchResults",
      }
    }
    message="message"
    removeBookList={[MockFunction]}
    results={Array []}
    sendSearch={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": "Sorry didn't find anything",
      "className": "sorry",
    },
    "ref": null,
    "rendered": "Sorry didn't find anything",
    "type": "h2",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Sorry didn't find anything",
        "className": "sorry",
      },
      "ref": null,
      "rendered": "Sorry didn't find anything",
      "type": "h2",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CardContainer should match the snapshot if location is /MustReadList 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardContainer
    addBookList={[MockFunction]}
    addMessage={[MockFunction]}
    bookList={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    getBookList={[MockFunction]}
    info={
      Object {
        "Name": "Looking for Alaska",
        "wTeaser": "teaser",
      }
    }
    isLoading={false}
    location={
      Object {
        "pathname": "/MustReadList",
      }
    }
    message="message"
    removeBookList={[MockFunction]}
    results={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    sendSearch={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(Message) />,
        <h2>
          Must Read List
        </h2>,
        <div
          className="card-container"
        >
          <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            loc="/MustReadList"
            message="message"
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Into the Wild",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />
          <Card
            addBookList={[MockFunction]}
            addMessage={[MockFunction]}
            getBookList={[MockFunction]}
            isFavorite={true}
            loc="/MustReadList"
            message="message"
            removeBookList={[MockFunction]}
            result={
              Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              }
            }
            sendSearch={[MockFunction]}
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Must Read List",
        },
        "ref": null,
        "rendered": "Must Read List",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />,
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />,
          ],
          "className": "card-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addBookList": [MockFunction],
              "addMessage": [MockFunction],
              "getBookList": [MockFunction],
              "isFavorite": true,
              "loc": "/MustReadList",
              "message": "message",
              "removeBookList": [MockFunction],
              "result": Object {
                "Name": "Into the Wild",
                "wTeaser": "teaser",
              },
              "sendSearch": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addBookList": [MockFunction],
              "addMessage": [MockFunction],
              "getBookList": [MockFunction],
              "isFavorite": true,
              "loc": "/MustReadList",
              "message": "message",
              "removeBookList": [MockFunction],
              "result": Object {
                "Name": "Looking for Alaska",
                "wTeaser": "teaser",
              },
              "sendSearch": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Message) />,
          <h2>
            Must Read List
          </h2>,
          <div
            className="card-container"
          >
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />
            <Card
              addBookList={[MockFunction]}
              addMessage={[MockFunction]}
              getBookList={[MockFunction]}
              isFavorite={true}
              loc="/MustReadList"
              message="message"
              removeBookList={[MockFunction]}
              result={
                Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                }
              }
              sendSearch={[MockFunction]}
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Must Read List",
          },
          "ref": null,
          "rendered": "Must Read List",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Card
                addBookList={[MockFunction]}
                addMessage={[MockFunction]}
                getBookList={[MockFunction]}
                isFavorite={true}
                loc="/MustReadList"
                message="message"
                removeBookList={[MockFunction]}
                result={
                  Object {
                    "Name": "Into the Wild",
                    "wTeaser": "teaser",
                  }
                }
                sendSearch={[MockFunction]}
              />,
              <Card
                addBookList={[MockFunction]}
                addMessage={[MockFunction]}
                getBookList={[MockFunction]}
                isFavorite={true}
                loc="/MustReadList"
                message="message"
                removeBookList={[MockFunction]}
                result={
                  Object {
                    "Name": "Looking for Alaska",
                    "wTeaser": "teaser",
                  }
                }
                sendSearch={[MockFunction]}
              />,
            ],
            "className": "card-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addBookList": [MockFunction],
                "addMessage": [MockFunction],
                "getBookList": [MockFunction],
                "isFavorite": true,
                "loc": "/MustReadList",
                "message": "message",
                "removeBookList": [MockFunction],
                "result": Object {
                  "Name": "Into the Wild",
                  "wTeaser": "teaser",
                },
                "sendSearch": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addBookList": [MockFunction],
                "addMessage": [MockFunction],
                "getBookList": [MockFunction],
                "isFavorite": true,
                "loc": "/MustReadList",
                "message": "message",
                "removeBookList": [MockFunction],
                "result": Object {
                  "Name": "Looking for Alaska",
                  "wTeaser": "teaser",
                },
                "sendSearch": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CardContainer should match the snapshot isLoading is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardContainer
    addBookList={[MockFunction]}
    addMessage={[MockFunction]}
    bookList={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    getBookList={[MockFunction]}
    info={
      Object {
        "Name": "Looking for Alaska",
        "wTeaser": "teaser",
      }
    }
    isLoading={true}
    location={
      Object {
        "pathname": "/MustReadList",
      }
    }
    message="message"
    removeBookList={[MockFunction]}
    results={
      Array [
        Object {
          "Name": "Into the Wild",
          "wTeaser": "teaser",
        },
        Object {
          "Name": "Looking for Alaska",
          "wTeaser": "teaser",
        },
      ]
    }
    sendSearch={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
